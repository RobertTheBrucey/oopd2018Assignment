/*****************************************************************************
* File:      Fruit.txt                                                       *
* Author:    Sean Ashton * Student ID: 14866636                              *
* Unit:      COMP1001 Object Oriented Program Design                         *
* Purpose:   Fruit object                                                    *
* Reference: None.                                                           *
* Comments:  This comment block is the maximum width of 78 characters.       *
* Requires:  Food, SUtil                                                     *
* Created:   20/05/2018 * Last Modified: 28/05/2018                          *
*****************************************************************************/
CLASS: Fruit INHERITS FROM Food

PUBLIC CLASS CONSTANTS:
   MINPIECES = 1
   MAXPIECES = 20
   SPACEMULT = 1.95 //Piece to volume multiplier

CLASS FIELDS:
   type (String)
   numPieces (integer)
   useBy (Calendar)

CONSTRUCTORS:
   DEFAULT: //This should never be used
   IMPORT: none
   EXPORT: Object Reference
   ASSERTION: ... is a valid default state
   ALGORITHM:
      super<--none
      type = ""
      numPieces = 1
      useBy = Calendar.getInstance<--none

   ALTERNATE:
   IMPORT: inName (String), inTemp (real), inPack (String), inType (String),
            inNumPieces (integer), inUseBy (Calendar)
   EXPORT: Object Reference
   ASSERTION: Creates object if import are valid, otherwise FAILS
   ALGORITHM:
      super<--inName,inTemp,inPack
      //Set methods copy Objects where necessary
      setType<--inType
      setUseBy<--inUseBy
      setNumPieces<--inNumPieces

   CSVSTRING:
   IMPORT: tokens (ARRAY OF String)
   EXPORT: Object Reference
   ASSERTION: Creates object from CSV string
   ALGORITHM:
      super<--tokens[1],CONVERT TO real tokens[4],tokens[6]
      setType<--tokens[2]
      setNumPieces<--CONVERT TO int tokens[3]
      setUseBy<--CONVERT TO Calendar tokens[5]

   COPY:
   IMPORT: toCopy (Fruit)
   EXPORT: Object Reference
   ASSERTION: Constructs an object with identical state to the import
   ALGORITHM:
      super<--toCopy
      //get methods always return copies of Objects
      type = toCopy.getType<--none
      useBy = toCopy.getUseBy<--none
      numPieces = toCopy.getNumPieces<--none

ACCESSORS:
   //Purpose: return a copy of class field type
   //Date Modified: 20/05/2018
   SUB MODULE getType
   IMPORT: none
   EXPORT: COPY OF type

   //Purpose: return a copy of class field useBy
   //Date Modified: 20/05/2018
   SUB MODULE getUseBy
   IMPORT: none
   EXPORT: COPY OF useBy

   //Purpose: return class field numPieces
   //Date Modified: 20/05/2018
   SUB MODULE getNumPieces
   IMPORT: none
   EXPORT: numPieces

   //Purpose: Compare equality between Food Objects
   //Date Modified: 20/05/2018
   SUB MODULE equals
   IMPORT: inFood (Food)
   EXPORT: bool (boolean)
   ASSERTION: Checks for if inFood has identical state to THIS
   ALGORITHM:
      bool = FALSE
      IF inFood IS A Fruit THEN
         MAKE inFood INTO Fruit
         IF super.equals<--inFood THEN
            IF type SAME AS inFood.getType<--none THEN
               IF numPieces == inFood.getNumPieces<--none THEN
                  IF useBy SAME AS inFood.getUseBy<--none THEN
                     bool = TRUE

   //Purpose: Return a descriptive string of object state
   //Date Modified: 28/05/2018
   SUB MODULE toString
   IMPORT: none
   EXPORT: string (String)
   ASSERTION: EXPORTs a descriptive String of object state
   ALGORITHM:
      string = super.toString<--none + ". Type: " + type + 
               ". Number of Pieces: " + numPieces + ". Use By: " + useBy

   //Purpose: return a copy of THIS Fruit
   //Date Modified: 20/05/2018
   SUB MODULE clone
   IMPORT: none
   EXPORT: fruit (Fruit)
   ASSERTION: EXPORTs a new Fruit object with identical state to THIS
   ALGORITHM:
      CONSTRUCT fruit USING COPY CONSTRUCTOR WITH THIS

   //Purpose: Generate a string to store
   //Date Modified: 23/05/2018
   SUB MODULE getCSV
   IMPORT: none
   EXPORT: csv (String)
   ASSERTION: EXPORTS a string for storage in a csv file
   ALGORITHM:
      csv = "Fruit, " + getName<--none + ", " + getType<--none + ", " + 
            numPieces + ", " + temperature + ", " +
             useBy FORMAT AS dd/mm/yyyy + ", " + getPackaging<--none
                                                         
   //Interface Methods
   SUB MODULE calcExpiry
   IMPORT: today (Calendar)
   EXPORT: bool (boolean)
   ASSERTION: bool will be true only if useBy is after today
   ALGORITHM:
      IF useBy.before<--today THEN
         bool = TRUE
      ELSE
         bool = FALSE

   SUB MODULE calcSpace
   IMPORT: food (Food)
   EXPORT: litres (integer)
   ASSERTION: litres will be numPieces * 1.0 rounded up
   ALGORITHM:
      litres = CONVERT TO integer (ROUND UP 
                  (CONVERT TO real numPieces * SPACEMULT))

MUTATORS:
   //Purpose: set class field type with input sanitisation
   //Date Modified: 20/05/2018
   SUB MODULE setType
   IMPORT: inType (String)
   EXPORT: none
   ASSERTION: Sets type to inType if inType is a valid input
   ALGORITHM:
      IF inType NOT NULL THEN
         type = SUtil.csvSanitise<--inType
      ELSE
         FAIL WITH Illegal Argument Exception

   //Purpose: set class field numPieces if input is within range
   //Date Modified: 28/05/2018
   SUB MODULE setNumPieces
   IMPORT: inNumPieces (integer)
   EXPORT: none
   ASSERTION: Sets numPieces to inNumPieces if inNumPieces is a valid input
   ALGORITHM:
      IF MINPIECES <= inNumPieces <= MAXPIECES THEN
         numPieces = inNumPieces
      ELSE
         FAIL WITH Illegal Argument Exception

   //Purpose: set useBy if input Date is now or in the future
   //Date Modified: 20/05/2018
   SUB MODULE setUseBy
   IMPORT: inUseBy (Calendar)
   EXPORT: none
   ASSERTION: Sets useBy to inUseBy if inUseBy is a valid input
   ALGORITHM:
      today = (Calendar of time now)
      IF inUseBy NOT NULL THEN
         IF NOT inUseBy.before<--today THEN
            useBy = COPY OF inUseBy
         ELSE
            FAIL WITH IllegalArgumentException
      ELSE
         FAIL WITH NullPointerException

DOING METHODS:

PRIVATE METHODS:

